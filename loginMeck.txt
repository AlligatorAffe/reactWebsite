const USER_REGEX = /^[a-zA-Z][a-zA-Z0-9-_]{3,23}$/;
const PWD_REGEX = /^(?=.*[A-Z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%]).{8,24}$/;  
  
  
  const userRef = useRef();
  const errRef = useRef();
  const navigate = useNavigate();

  const [userEmail, setUserEmail] = useState(""); // the email the user uses to try to login with, also the same email that is sent to the backend.
  const [validName, setValidName] = useState(false);
  const [userFocus, setUserFocus] = useState(false);

  const [inputPassword, setInputPassword] = useState(""); // password the user inputs and the password that is sent to backend 
  const [validPassword,setValidPassword] = useState(false);
  const [passwordFocus,setPasswordFocus] = useState(false);

  const [matchPassW,setMatchPassW] = useState("")
  const [validMatch,setValidMatch] = useState(false);
  const [matchFocus, setMatchFocus] = useState(false);

  const [error, setError] = useState(""); // State to handle error
  const [success,setSuccess] = useState(false);
  const loggedIn = isUserLoggedIn();

  useEffect(() =>{
    userRef.current.focus();
  }, [])

  useEffect(() =>{
    const result = USER_REGEX.test(userEmail);
    console.log(result)
    console.log(userEmail);
    setValidName(result);
  }, [userEmail])
    

  useEffect(() =>{
    const result = PWD_REGEX.test(inputPassword);
    console.log(result);
    console.log(inputPassword);
    setValidPassword(result);
    const match = inputPassword == matchPassW;
    setValidMatch(match);
  }, [inputPassword, matchPassW])

  useEffect(() =>{
    setError("");
  },[userEmail,inputPassword,matchPassW])







------------------------

// Generating JWT
app.post("/user/generateToken", (req, res) => {
  // Validate User Here
  console.log("häääär")
  const { username, password } = req.body;
  if (username === "admin@admin.com" && password === "admin") {
    let jwtSecretKey = process.env.JWT_SECRET_KEY;
    let data = {
      time: Date(),
      userId: 12,
    };

    const token = jwt.sign(data, jwtSecretKey);

    // Skicka tillbaka både token och statuskod 200 om autentiseringen är framgångsrik
    res.status(200).json({ token }); // Använd json() för att skicka JSON-svar
  } else {
    // Skicka en 401-statuskod och ett felmeddelande om autentiseringen misslyckas
    res.status(401).json({ error: "Wrong Email or Password" });
  }
});

// Verification of JWT
app.get("/user/validateToken", (req, res) => {
  // Tokens are generally passed in header of request
  // Due to security reasons.

  let tokenHeaderKey = process.env.TOKEN_HEADER_KEY;
  // eslint-disable-next-line no-undef
  let jwtSecretKey = process.env.JWT_SECRET_KEY;

  try {
    const token = req.header(tokenHeaderKey);

    const verified = jwt.verify(token, jwtSecretKey);
    if (verified) {
      return res.send("Successfully Verified");
    } else {
      // Access Denied
      console.log("i denna fitt funktionen")
      return res.status(401).send(error);
    }
  } catch (error) {
    // Access Denied
    console.log("i denna fitt funktionen222")
    return res.status(401).send(error);
  }
});

